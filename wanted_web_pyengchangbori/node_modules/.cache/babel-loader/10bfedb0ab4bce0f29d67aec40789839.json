{"ast":null,"code":"// import { ApiFilled } from '@ant-design/icons';\n// import { API } from 'utils/api';\n// /* eslint-disable no-shadow */\n// const { default: axios } = require('axios');\n// const { useState, useEffect } = require('react');\n// const useGetData = () => {\n// \tconst [data, setData] = useState();\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [error, setError] = useState('');\n// \tconst initialization = () => {\n// \t\tsetData(undefined);\n// \t\tsetIsLoading(false);\n// \t};\n// \tconst HocGet = (url) => {\n// \t\tconst fetchData = async () => {\n// \t\t\ttry {\n// \t\t\t\tawait API.get(url)\n// \t\t\t\t\t.then((res) => {\n// \t\t\t\t\t\tsetData(res);\n// \t\t\t\t\t})\n// \t\t\t\t\t.finally(() => {\n// \t\t\t\t\t\tsetIsLoading(true);\n// \t\t\t\t\t\tinitialization();\n// \t\t\t\t\t});\n// \t\t\t} catch (error) {\n// \t\t\t\t// setError(error); 에러를 내보내고 싶으면 이렇게 하기\n// \t\t\t\tthrow new Error(error);\n// \t\t\t}\n// \t\t};\n// \t\tif (!isLoading) {\n// \t\t\tfetchData();\n// \t\t}\n// \t};\n// \t// useEffect(() => {\n// \t// \tconst fetchData = async () => {\n// \t// \t\ttry {\n// \t// \t\t\tawait API.get(url)\n// \t// \t\t\t\t.then((res) => {\n// \t// \t\t\t\t\tsetData(res);\n// \t// \t\t\t\t})\n// \t// \t\t\t\t.finally(() => {\n// \t// \t\t\t\t\tsetIsLoading(true);\n// \t// \t\t\t\t});\n// \t// \t\t} catch (error) {\n// \t// \t\t\t// setError(error); 에러를 내보내고 싶으면 이렇게 하기\n// \t// \t\t\tthrow new Error(error);\n// \t// \t\t}\n// \t// \t};\n// \t// \tif (!isLoading) {\n// \t// \t\tfetchData();\n// \t// \t}\n// \t// }, [url]);\n// \treturn { data, error, isLoading, HocGet };\n// };\n// export default useGetData;","map":{"version":3,"names":[],"sources":["C:/Users/cksgo/Desktop/RC7/Rising_Test/wanted_web_pyengchangbori/src/hoc/useGetData.js"],"sourcesContent":["// import { ApiFilled } from '@ant-design/icons';\r\n// import { API } from 'utils/api';\r\n\r\n// /* eslint-disable no-shadow */\r\n// const { default: axios } = require('axios');\r\n// const { useState, useEffect } = require('react');\r\n\r\n// const useGetData = () => {\r\n// \tconst [data, setData] = useState();\r\n// \tconst [isLoading, setIsLoading] = useState(false);\r\n// \tconst [error, setError] = useState('');\r\n\r\n// \tconst initialization = () => {\r\n// \t\tsetData(undefined);\r\n// \t\tsetIsLoading(false);\r\n// \t};\r\n\r\n// \tconst HocGet = (url) => {\r\n// \t\tconst fetchData = async () => {\r\n// \t\t\ttry {\r\n// \t\t\t\tawait API.get(url)\r\n// \t\t\t\t\t.then((res) => {\r\n// \t\t\t\t\t\tsetData(res);\r\n// \t\t\t\t\t})\r\n// \t\t\t\t\t.finally(() => {\r\n// \t\t\t\t\t\tsetIsLoading(true);\r\n// \t\t\t\t\t\tinitialization();\r\n// \t\t\t\t\t});\r\n// \t\t\t} catch (error) {\r\n// \t\t\t\t// setError(error); 에러를 내보내고 싶으면 이렇게 하기\r\n// \t\t\t\tthrow new Error(error);\r\n// \t\t\t}\r\n// \t\t};\r\n\r\n// \t\tif (!isLoading) {\r\n// \t\t\tfetchData();\r\n// \t\t}\r\n// \t};\r\n\r\n// \t// useEffect(() => {\r\n// \t// \tconst fetchData = async () => {\r\n// \t// \t\ttry {\r\n// \t// \t\t\tawait API.get(url)\r\n// \t// \t\t\t\t.then((res) => {\r\n// \t// \t\t\t\t\tsetData(res);\r\n// \t// \t\t\t\t})\r\n// \t// \t\t\t\t.finally(() => {\r\n// \t// \t\t\t\t\tsetIsLoading(true);\r\n// \t// \t\t\t\t});\r\n// \t// \t\t} catch (error) {\r\n// \t// \t\t\t// setError(error); 에러를 내보내고 싶으면 이렇게 하기\r\n// \t// \t\t\tthrow new Error(error);\r\n// \t// \t\t}\r\n// \t// \t};\r\n\r\n// \t// \tif (!isLoading) {\r\n// \t// \t\tfetchData();\r\n// \t// \t}\r\n// \t// }, [url]);\r\n\r\n// \treturn { data, error, isLoading, HocGet };\r\n// };\r\n\r\n// export default useGetData;\r\n"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA"},"metadata":{},"sourceType":"module"}