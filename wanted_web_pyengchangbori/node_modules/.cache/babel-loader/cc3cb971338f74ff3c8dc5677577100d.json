{"ast":null,"code":"/* eslint-disable consistent-return */\nconst {\n  default: axios\n} = require('axios');\n\nexport const API = axios.create({\n  baseURL: 'https://dev.seojin.shop/',\n  timeout: 5000,\n  headers: {\n    'Content-Type': `application/json;charset=UTF-8`,\n    'Access-Control-Allow-Origin': '*',\n    Accept: 'application/json'\n  }\n});\n\nfunction wrapPromise(promise) {\n  let status = 'pending';\n  let result;\n  const suspender = promise.then(r => {\n    status = 'success';\n    result = r;\n  }, e => {\n    status = 'error';\n    result = e;\n  });\n  return {\n    read() {\n      if (status === 'pending') {\n        throw suspender;\n      } else if (status === 'error') {\n        throw result;\n      } else if (status === 'success') {\n        return result;\n      }\n    }\n\n  };\n}\n\nexport async function CustomPost(_ref) {\n  let {\n    url,\n    body = null,\n    headers = null\n  } = _ref;\n\n  try {\n    const res = await API.post(url, body, {\n      headers\n    });\n    return wrapPromise(res); // return res.data;\n  } catch (error) {\n    console.log(error);\n    throw new Error(error);\n  }\n}\n_c = CustomPost;\nexport async function CustomGet(_ref2) {\n  let {\n    url,\n    headers,\n    body\n  } = _ref2;\n\n  try {\n    const res = await API.get(url);\n    return res.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n_c2 = CustomGet;\n\nfunction fetchCompanyByTag() {\n  return new Promise(CustomGet({\n    url: 'web/jobsFeed/companyByTag'\n  })); // companyByTagResult.then((res) => {\n  // \tconsole.log(res);\n  // \tswitch (res.code) {\n  // \t\tcase 1005:\n  // \t\t\tsetCompanyByTag(res.result);\n  // \t\t\tbreak;\n  // \t\tdefault:\n  // \t}\n  // });\n}\n\nexport const fetchJobFreedData = () => {\n  const companyByTag = fetchCompanyByTag();\n  return {\n    user: wrapPromise(companyByTag)\n  };\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CustomPost\");\n$RefreshReg$(_c2, \"CustomGet\");","map":{"version":3,"names":["default","axios","require","API","create","baseURL","timeout","headers","Accept","wrapPromise","promise","status","result","suspender","then","r","e","read","CustomPost","url","body","res","post","error","console","log","Error","CustomGet","get","data","fetchCompanyByTag","Promise","fetchJobFreedData","companyByTag","user"],"sources":["C:/Users/cksgo/Desktop/RC7/Rising_Test/wanted_web_pyengchangbori/src/utils/api.js"],"sourcesContent":["/* eslint-disable consistent-return */\r\nconst { default: axios } = require('axios');\r\n\r\nexport const API = axios.create({\r\n\tbaseURL: 'https://dev.seojin.shop/',\r\n\ttimeout: 5000,\r\n\theaders: {\r\n\t\t'Content-Type': `application/json;charset=UTF-8`,\r\n\t\t'Access-Control-Allow-Origin': '*',\r\n\t\tAccept: 'application/json',\r\n\t},\r\n});\r\n\r\nfunction wrapPromise(promise) {\r\n\tlet status = 'pending';\r\n\tlet result;\r\n\tconst suspender = promise.then(\r\n\t\t(r) => {\r\n\t\t\tstatus = 'success';\r\n\t\t\tresult = r;\r\n\t\t},\r\n\t\t(e) => {\r\n\t\t\tstatus = 'error';\r\n\t\t\tresult = e;\r\n\t\t},\r\n\t);\r\n\treturn {\r\n\t\tread() {\r\n\t\t\tif (status === 'pending') {\r\n\t\t\t\tthrow suspender;\r\n\t\t\t} else if (status === 'error') {\r\n\t\t\t\tthrow result;\r\n\t\t\t} else if (status === 'success') {\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t},\r\n\t};\r\n}\r\n\r\nexport async function CustomPost({ url, body = null, headers = null }) {\r\n\ttry {\r\n\t\tconst res = await API.post(url, body, { headers });\r\n\t\treturn wrapPromise(res);\r\n\t\t// return res.data;\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t\tthrow new Error(error);\r\n\t}\r\n}\r\n\r\nexport async function CustomGet({ url, headers, body }) {\r\n\ttry {\r\n\t\tconst res = await API.get(url);\r\n\t\treturn res.data;\r\n\t} catch (error) {\r\n\t\tthrow new Error(error);\r\n\t}\r\n}\r\n\r\nfunction fetchCompanyByTag() {\r\n\treturn new Promise(\r\n\t\tCustomGet({\r\n\t\t\turl: 'web/jobsFeed/companyByTag',\r\n\t\t}),\r\n\t);\r\n\r\n\t// companyByTagResult.then((res) => {\r\n\t// \tconsole.log(res);\r\n\t// \tswitch (res.code) {\r\n\t// \t\tcase 1005:\r\n\t// \t\t\tsetCompanyByTag(res.result);\r\n\t// \t\t\tbreak;\r\n\t// \t\tdefault:\r\n\t// \t}\r\n\t// });\r\n}\r\n\r\nexport const fetchJobFreedData = () => {\r\n\tconst companyByTag = fetchCompanyByTag();\r\n\treturn {\r\n\t\tuser: wrapPromise(companyByTag),\r\n\t};\r\n};\r\n"],"mappings":"AAAA;AACA,MAAM;EAAEA,OAAO,EAAEC;AAAX,IAAqBC,OAAO,CAAC,OAAD,CAAlC;;AAEA,OAAO,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAN,CAAa;EAC/BC,OAAO,EAAE,0BADsB;EAE/BC,OAAO,EAAE,IAFsB;EAG/BC,OAAO,EAAE;IACR,gBAAiB,gCADT;IAER,+BAA+B,GAFvB;IAGRC,MAAM,EAAE;EAHA;AAHsB,CAAb,CAAZ;;AAUP,SAASC,WAAT,CAAqBC,OAArB,EAA8B;EAC7B,IAAIC,MAAM,GAAG,SAAb;EACA,IAAIC,MAAJ;EACA,MAAMC,SAAS,GAAGH,OAAO,CAACI,IAAR,CAChBC,CAAD,IAAO;IACNJ,MAAM,GAAG,SAAT;IACAC,MAAM,GAAGG,CAAT;EACA,CAJgB,EAKhBC,CAAD,IAAO;IACNL,MAAM,GAAG,OAAT;IACAC,MAAM,GAAGI,CAAT;EACA,CARgB,CAAlB;EAUA,OAAO;IACNC,IAAI,GAAG;MACN,IAAIN,MAAM,KAAK,SAAf,EAA0B;QACzB,MAAME,SAAN;MACA,CAFD,MAEO,IAAIF,MAAM,KAAK,OAAf,EAAwB;QAC9B,MAAMC,MAAN;MACA,CAFM,MAEA,IAAID,MAAM,KAAK,SAAf,EAA0B;QAChC,OAAOC,MAAP;MACA;IACD;;EATK,CAAP;AAWA;;AAED,OAAO,eAAeM,UAAf,OAAgE;EAAA,IAAtC;IAAEC,GAAF;IAAOC,IAAI,GAAG,IAAd;IAAoBb,OAAO,GAAG;EAA9B,CAAsC;;EACtE,IAAI;IACH,MAAMc,GAAG,GAAG,MAAMlB,GAAG,CAACmB,IAAJ,CAASH,GAAT,EAAcC,IAAd,EAAoB;MAAEb;IAAF,CAApB,CAAlB;IACA,OAAOE,WAAW,CAACY,GAAD,CAAlB,CAFG,CAGH;EACA,CAJD,CAIE,OAAOE,KAAP,EAAc;IACfC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACA,MAAM,IAAIG,KAAJ,CAAUH,KAAV,CAAN;EACA;AACD;KATqBL,U;AAWtB,OAAO,eAAeS,SAAf,QAAiD;EAAA,IAAxB;IAAER,GAAF;IAAOZ,OAAP;IAAgBa;EAAhB,CAAwB;;EACvD,IAAI;IACH,MAAMC,GAAG,GAAG,MAAMlB,GAAG,CAACyB,GAAJ,CAAQT,GAAR,CAAlB;IACA,OAAOE,GAAG,CAACQ,IAAX;EACA,CAHD,CAGE,OAAON,KAAP,EAAc;IACf,MAAM,IAAIG,KAAJ,CAAUH,KAAV,CAAN;EACA;AACD;MAPqBI,S;;AAStB,SAASG,iBAAT,GAA6B;EAC5B,OAAO,IAAIC,OAAJ,CACNJ,SAAS,CAAC;IACTR,GAAG,EAAE;EADI,CAAD,CADH,CAAP,CAD4B,CAO5B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;;AAED,OAAO,MAAMa,iBAAiB,GAAG,MAAM;EACtC,MAAMC,YAAY,GAAGH,iBAAiB,EAAtC;EACA,OAAO;IACNI,IAAI,EAAEzB,WAAW,CAACwB,YAAD;EADX,CAAP;AAGA,CALM"},"metadata":{},"sourceType":"module"}